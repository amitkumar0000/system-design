Cache is short term memory.
Types of Caches
-----------------
1. Application Server Cache
    Placing a Caching in server layer node enables the local storage data.
    Each time a request is made, node will quickly return cache data if exist.
    The cache in request node can exist in both memory and local disk.

    If request node is expanded to multiple node, it is quite possible to have each node its own cache.
    If load balancer unevenly distributed request across server node, thus increasing cache misses.
    To choices for overcoming this hurdles are global cache and distributed cache.

2. Global Cache
    It use single Cache system.
    Each request node access cache via global cache.
    in cache miss either its global cache responsibility to retrieve data
    or requesting node do itself

3. Distributed Cache
   In this each server node holds some part of Cache part.
   Each request requires server node to find node containing cache data using consistent hashing and
   forward request to that node.
   This become complicated when node is added and removed frequently.

4. Content Distribution Network(CDN)
    CDN is storing large static media file close to requesting node.
    Each request goes via CDN , if cache miss CDN gets data store it locally.

Cache Invalidation
------------------
Cache invalidation need to take care whenever data is modified in database, cache data need to invalidate.

Cache Invalidation Scheme
-------------------------
1. Write through Cache
    Both cache and database is written at same time, ensuring data consistence and no data is loss in case of power failure.
    have high write latency

2. Write around cache
    Data is written first in database

3. Write back cache
    Data is written first in cache and database write is delay for certain time


Cache Eviction Policy
--------------------
1. FIFO :- First In First Out
2. LIFO :- Last In First Out
3. LRU  :- Least Recently used
4. MRU  :- Most Recently Used
5. LFU  :- Least Frequency used. Count the number of times data is used, with less count is evicted first
6. RR   :- Random Replacement

Lru Cache is implemented via DoubleLinkedList and HashMap DS
------------------------------------------------------------
HashMap gives position of node in 0(1) times.
Insertion in tail takes 0(1) times.
Deletion from head takes 0(1) times.
In  Node Access
    HashMap give position in 0(1) times.
    Delete that node in 0(1) times.
    Insert that node in tail takes 0(1) times.










